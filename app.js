// === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏ ===
const map = L.map('map').setView([20, 0], 2);

// –ë–∞–∑–æ–≤–∏–π —à–∞—Ä –∫–∞—Ä—Ç–∏ (OpenStreetMap)
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

let geojsonLayer; // —à–∞—Ä –∑ –º–µ–∂–∞–º–∏ –∫—Ä–∞—ó–Ω
let salesData = {}; // –¥–∞–Ω—ñ –ø—Ä–æ–¥–∞–∂—ñ–≤: { "USA": 1500000, ... }

// === –ö–æ–ª—ñ—Ä–Ω–∞ —à–∫–∞–ª–∞ ===
function getColor(d) {
  return d > 10000000 ? '#800026' :
         d > 5000000  ? '#BD0026' :
         d > 1000000  ? '#E31A1C' :
         d > 500000   ? '#FC4E2A' :
         d > 100000   ? '#FD8D3C' :
         d > 50000    ? '#FEB24C' :
         d > 0        ? '#FED976' :
                        '#636363ff';
}

// === –°—Ç–∏–ª—å –¥–ª—è –∫—Ä–∞—ó–Ω ===
function style(feature) {
  const code = feature.properties.ISO_A3; // —Ç—Ä–∏–ª—ñ—Ç–µ—Ä–Ω–∏–π –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏
  const sales = salesData[code] || 0;
  return {
    fillColor: getColor(sales),
    weight: 1,
    color: '#fff',
    fillOpacity: 0.7
  };
}

// === –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ ===
function highlightFeature(e) {
  const layer = e.target;
  // –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–∑–Ω—ñ –ø–æ–ª—è –∑ –∫–æ–¥–æ–º –∫—Ä–∞—ó–Ω–∏,
  // —Ç—É—Ç –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç–æ–π, —â–æ —î –≤ geojson
  const code = (layer.feature.properties.adm0_a3_ar || layer.feature.properties.ISO_A3 || "").toUpperCase();
  const country = layer.feature.properties.admin;
  const sales = salesData[code] || 0;

  // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É (labels –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π)
  layer.bindPopup(`<b>${country}</b><br>Cars sold: ${sales.toLocaleString()}`).openPopup();
}

function resetHighlight(e) {
  // –ú–æ–∂–Ω–∞ —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∏–ª—å –∞–±–æ –∑–∞–∫—Ä–∏—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É —Ç—É—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  // geojsonLayer.resetStyle(e.target);
  // e.target.closePopup();
}

// === –ü–æ–¥—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–µ–æ-–µ–ª–µ–º–µ–Ω—Ç–∞ ===
function onEachFeature(feature, layer) {
  layer.on({
    mouseover: highlightFeature,
    mouseout: resetHighlight
  });
}

// === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ ===
async function loadMap(year = 2024) {
  try {
    console.log(`üó∫Ô∏è Loading data for ${year}...`);

    // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–¥–∞–∂—ñ –∑ –±–µ–∫–µ–Ω–¥—É
    const res = await fetch(`http://localhost:3000/sales/${year}`);
    const data = await res.json();
    console.log("üìä Sales data from server:", data);

    salesData = {};
    data.forEach(r => {
      // –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ–¥—ñ–≤ –¥–æ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
      if (r.country_code) salesData[r.country_code.toUpperCase()] = r.sales;
    });

    // 2Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ GeoJSON
    const geoRes = await fetch('world.geo.json');
    const geojson = await geoRes.json();

    // 3Ô∏è‚É£ –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π —à–∞—Ä, —è–∫—â–æ —î
    if (geojsonLayer) map.removeLayer(geojsonLayer);

    // 4Ô∏è‚É£ –î–æ–¥–∞—î–º–æ —à–∞—Ä –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º —Å—Ç–∏–ª–µ–º
    geojsonLayer = L.geoJson(geojson, { style, onEachFeature }).addTo(map);
    geojsonLayer.eachLayer(layer => {
      const code = (layer.feature.properties.adm0_a3_ar || layer.feature.properties.ISO_A3 || "").toUpperCase();
      const country = layer.feature.properties.admin;
      const sales = salesData[code] || 0;

      const colourOverlay = getColor(sales);
      layer.setStyle({
        fill: true,
        fillColor: colourOverlay,
        fillOpacity: 0.8,
        color: '#fff',
        weight: 1
      });
    });

  } catch (err) {
    console.error("‚ùå Error loading map:", err);
  }
}

// === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ä–æ–∫—ñ–≤ ===
async function loadYears() {
  try {
    const res = await fetch('http://localhost:3000/years');
    const years = await res.json();

    console.log("üìÖ Available years:", years);

    const select = document.getElementById('yearSelect');
    select.innerHTML = ""; // –æ—á–∏—â—É—î–º–æ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ—é

    years.forEach(y => {
      const option = document.createElement('option');
      option.value = y;
      option.textContent = y;
      select.appendChild(option);
    });

    // –æ–±–∏—Ä–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π) —Ä—ñ–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    const defaultYear = years[years.length - 1];
    select.value = defaultYear;

    select.addEventListener('change', e => {
      const year = parseInt(e.target.value);
      loadMap(year);
    });

    await loadMap(defaultYear);

  } catch (err) {
    console.error("‚ùå Error loading years:", err);
  }
}

// === –ó–∞–ø—É—Å–∫ ===
loadYears();
