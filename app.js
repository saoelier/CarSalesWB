// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã ===
const map = L.map('map').setView([20, 0], 2);

// –ë–∞–∑–æ–≤—ã–π —Å–ª–æ–π –∫–∞—Ä—Ç—ã (OpenStreetMap)
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

let geojsonLayer; // —Å–ª–æ–π —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å—Ç—Ä–∞–Ω
let salesData = {}; // –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂: { "USA": 1500000, ... }

// === –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞ ===
function getColor(d) {
  return d > 10000000 ? '#800026' :
         d > 5000000  ? '#BD0026' :
         d > 1000000  ? '#E31A1C' :
         d > 500000   ? '#FC4E2A' :
         d > 100000   ? '#FD8D3C' :
         d > 50000    ? '#FEB24C' :
         d > 0        ? '#FED976' :
                        '#FFEDA0';
}

// === –°—Ç–∏–ª—å —Å—Ç—Ä–∞–Ω ===
function style(feature) {
  const code = feature.properties.ISO_A3; // —Ç—Ä—ë—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
  const sales = salesData[code] || 0;
  return {
    fillColor: getColor(sales),
    weight: 1,
    color: '#fff',
    fillOpacity: 0.7
  };
}

// === –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ ===
function highlightFeature(e) {
  const layer = e.target;
  layer.setStyle({ weight: 2, color: '#666', fillOpacity: 0.9 });

  const code = layer.feature.properties.ISO_A3;
  const country = layer.feature.properties.ADMIN;
  const sales = salesData[code] || 0;
  layer.bindPopup(`<b>${country}</b><br>–ü—Ä–æ–¥–∞–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${sales.toLocaleString()}`).openPopup();
}

function resetHighlight(e) {
  geojsonLayer.resetStyle(e.target);
  e.target.closePopup();
}

// === –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω ===
function onEachFeature(feature, layer) {
  layer.on({
    mouseover: highlightFeature,
    mouseout: resetHighlight
  });
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã ===
async function loadMap(year = 2024) {
  try {
    console.log(`üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ ${year}...`);

    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏
    const res = await fetch(`http://localhost:3000/sales/${year}`);
    const data = await res.json();
    console.log("üìä –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:", data);

    salesData = {};
    data.forEach(r => {
      // –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      if (r.country_code) salesData[r.country_code.toUpperCase()] = r.sales;
    });

    // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º GeoJSON
    const geoRes = await fetch('world.geo.json');
    const geojson = await geoRes.json();

    // 3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (geojsonLayer) map.removeLayer(geojsonLayer);

    // 4Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
    geojsonLayer = L.geoJson(geojson, { style, onEachFeature }).addTo(map);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã:", err);
  }
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≥–æ–¥–æ–≤ ===
async function loadYears() {
  try {
    const res = await fetch('http://localhost:3000/years');
    const years = await res.json();

    console.log("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥–∞:", years);

    const select = document.getElementById('yearSelect');
    select.innerHTML = ""; // –æ—á–∏—Å—Ç–∏–º –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π

    years.forEach(y => {
      const option = document.createElement('option');
      option.value = y;
      option.textContent = y;
      select.appendChild(option);
    });

    // –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π) –≥–æ–¥
    const defaultYear = years[years.length - 1];
    select.value = defaultYear;

    select.addEventListener('change', e => {
      const year = parseInt(e.target.value);
      loadMap(year);
    });

    await loadMap(defaultYear);

  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ–¥–æ–≤:", err);
  }
}

// === –ó–∞–ø—É—Å–∫ ===
loadYears();